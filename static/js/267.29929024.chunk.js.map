{"version":3,"file":"static/js/267.29929024.chunk.js","mappings":"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","sources":["redux/contact/selectors.js","components/App/App.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","redux/contact/filterSlice.js","components/filter/Filter.jsx","components/contactList/ContactList.styled.js","components/Item/Item.styled.js","components/Item/Item.jsx","components/contactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contact.contacts.items;\nexport const selectFilter = state => state.contact.contacts.filter\n\n  export const selectLoading = state =>  state.contact.contacts.isLoading;\n\n\nexport const filterContacts = createSelector(\n  selectContacts,\n  selectFilter,\n  (contacts, filter) => {\n    return filter\n      ? contacts.filter(item => item.name.toLowerCase().includes(filter))\n      : contacts;\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 450px;\n  margin: 50px auto;\n  /* padding: 20px; */\n  /* text-align: center; */\n  border-radius: 6px;\n    background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  box-shadow: inset 0 -3em 3em rgba(0, 0, 0, 0.1), 0 0 0 2px rgb(255, 255, 255),\n    0.3em 0.3em 1em rgba(0, 0, 0, 0.3);\n\n  & h1, h2 {\n    text-align: center;\n    color: #333;\n    /* font-size: 24px; */\n    margin-bottom: 20px;\n  }\n\n & header {\n  border-radius: 4px;\n\n  }\n  `;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-bottom: 20px;\n  text-align: center;  \n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 10px;\n  color: #555;\n  line-height: 2em;\n\n  input {\n    box-sizing: border-box;\n    width: 100%;\n    padding: 8px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    &:hover\n     {\n      box-shadow: 0px 0px 2px 2px #449cf4;\n      // border:none;\n    }\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 8px 16px;\n  font-size: 16px;\n  border-color: #ccc;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #449cf4;\n    border-color: #449cf4;\n    color: white;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Label } from './ContactForm.styled';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { selectContacts } from '../../redux/contact/selectors';\nimport { addContact } from '../../redux/contact/options';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      id: nanoid(3),\n      name,\n      number,\n    };\n    if (checkContactNameRepeat(name)) {\n      alert(`${name} already exists`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  const checkContactNameRepeat = name => {\n    const temporaryNameArray = contacts.map(item => item.name.toLowerCase());\n    return temporaryNameArray.includes(name.toLowerCase());\n  };\n  return (\n    <Form onSubmit={handleOnSubmit}>\n      <Label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <Label>\n        Tel\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: { filter: '' },\n  reducers: {\n    filterValue: (state, { payload }) => {\n      state.filter = payload;\n    },\n  },\n});\n\nexport const { filterValue } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport { filterValue } from '../../redux/contact/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <TextField\n      id=\"standard-basic\"\n      label=\"Filter\"\n      variant=\"standard\"\n      name=\"filter\"\n      onChange={e => {\n        dispatch(filterValue(e.target.value));\n      }}\n    />\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ol`\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f9f9f9;\n  border-radius: 4px;\n  align-items: center;\n  &:hover {\n    background-color: #449cf43d;\n  }\n`;\n\nexport const Delete = styled.button`\n  /* position: absolute;\n  top: 0;\n  right: 0; */\n\n  margin-left: 40px;\n  border-color: #ccc;\n  border-radius: 4px;\n  font-size: 22px;\n  cursor: pointer;\n  &:hover {\n    background-color: #449cf4;\n    border-color: #449cf4;\n    color: white;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const TodoWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  gap: 15;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const EditButton = styled.button`\n  &:hover,\n  &:focus {\n    background-color: #449cf4;\n    border-color: #449cf4;\n    color: white;\n  }\n`;\n","import { SlUserUnfollow } from 'react-icons/sl';\nimport { Delete } from 'components/contactList/ContactList.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contact/options';\nimport { TodoWrapper } from './Item.styled';\n// import { deleteContact, editContact } from '../../redux/options';\n// import { DeleteButton, EditButton, TodoWrapper } from './Item.styled';\n// import { RiEdit2Line } from 'react-icons/ri';\n\nexport const ItemContact = ({ currentContact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <TodoWrapper>\n      <p>\n        <span>{name}</span>: <span>{number}</span>\n      </p>\n      <div>\n        {/* <EditButton type=\"button\" onClick={() => dispatch(editContact(id))}>\n          <RiEdit2Line size={20} />\n        </EditButton> */}\n        <Delete onClick={() => dispatch(deleteContact(id))}>\n          <SlUserUnfollow />\n        </Delete>\n      </div>\n    </TodoWrapper>\n  );\n};\n","import { ItemContact } from 'components/Item/Item';\nimport { Item, List } from './ContactList.styled';\nimport { filterContacts } from '../../redux/contact/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contact/options';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(filterContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {filteredContacts && (\n        <List>\n          {filteredContacts &&\n            filteredContacts.map(currentContact => {\n              return (\n                <Item key={currentContact.id}>\n                  <ItemContact currentContact={currentContact} />\n                </Item>\n              );\n            })}\n        </List>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectLoading } from '../redux/contact/selectors';\nimport { fetchContacts } from '../redux/contact/options';\nimport { Container } from '../components/App/App.styled';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport Filter from '../components/filter/Filter';\nimport { ContactList } from '../components/contactList/ContactList';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <Container>\n        <h1>Phone book</h1>\n        <ContactForm />\n        <Filter />\n        <div>{isLoading && 'Request in progress...'}</div>\n\n        <ContactList />\n      </Container>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contact","contacts","items","selectLoading","isLoading","filterContacts","createSelector","filter","item","name","toLowerCase","includes","Container","styled","Form","Label","Button","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","checkContactNameRepeat","map","onSubmit","preventDefault","newContact","id","nanoid","alert","addContact","type","pattern","title","required","onChange","filterSlice","createSlice","initialState","reducers","filterValue","payload","actions","reducer","TextField","label","variant","List","Item","Delete","TodoWrapper","ItemContact","currentContact","onClick","deleteContact","ContactList","filteredContacts","useEffect","fetchContacts","Tasks","Helmet"],"sourceRoot":""}